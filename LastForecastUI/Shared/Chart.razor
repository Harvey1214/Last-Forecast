@page "/chart"
@page "/chart/{code}"

@using Forecast
@using ForecastLibrary

@inject NavigationManager NavigationManager
@inject IForecastingManager ForecastingManager

@if (Visible)
{
    @if (Product != null && DisplayDescription)
    {
        <div>
            @Product.Product.Code
            &nbsp;&nbsp;&nbsp;&nbsp;
            @Product.Product.Title
            &nbsp;&nbsp;&nbsp;&nbsp;
            Days until stockout: @Product.DaysToOrder
            &nbsp;&nbsp;&nbsp;&nbsp;
            Monthly Sales: @Product.MonthlySales
            &nbsp;&nbsp;&nbsp;&nbsp;
            Inventory: @Product.Product.Inventory
            &nbsp;&nbsp;&nbsp;&nbsp;
            Prediction Algorithm: @Product.PredictionAlgorithm.ToString()
        </div>
    }

    <div class="row">
        <div class="col-md-6 col-sm-12 p-4">
            <RadzenChart @ref="SalesChart">
                <RadzenAreaSeries Smooth="@smooth" Data="@Data" CategoryProperty="Date" Title="Sold" ValueProperty="Quantity">
                </RadzenAreaSeries>
                <RadzenAreaSeries Smooth="@smooth" Data="@PredictedData" CategoryProperty="Date" Title="Prediction" ValueProperty="Quantity" LineType="LineType.Dashed" RenderingOrder="1">
                </RadzenAreaSeries>
                <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Quantity" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>

    <!--
            <RadzenButton Text="Back" Click="@GoBack" />
    -->
}

@code {
    bool smooth = true;

    [Parameter]
    public ProcessOutput Product { get; set; }

    [Parameter]
    public string code { get; set; }

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public bool DisplayDescription { get; set; } = true;

    private RadzenChart SalesChart { get; set; }

    private List<DataItem> Data = new List<DataItem>();
    private List<DataItem> PredictedData = new List<DataItem>();

    protected override void OnParametersSet()
    {
        @*if (ForecastingManager.Results != null)
                Product = ForecastingManager.Results.Where(o => o.Product.Code == code).FirstOrDefault();

            if (Product != null)
                Update();*@
    }

    protected override void OnInitialized()
    {
        if (Product != null)
            Update();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/forecast");
    }

    public void Update()
    {
        Data.Clear();

        DateTime startDate = DateTime.Now;

        foreach (var sale in Product.Product.Sales)
        {
            DateTime date = new DateTime();
            date = date.AddDays(sale.Day);
            date = date.AddMonths(Convert.ToInt32(sale.Month));
            date = date.AddYears(Convert.ToInt32(sale.Year));

            if (date < startDate)
            {
                startDate = date;
            }
        }

        startDate = startDate.AddYears(-1);
        startDate = startDate.AddMonths(-1);
        while (startDate < DateTime.Now)
        {
            DataItem item = new DataItem();
            var salesInMonth = Product.Product.Sales.Where(o => o.Year == startDate.Year && o.Month == startDate.Month);

            int totalSoldInMonth = 0;
            foreach (var sale in salesInMonth)
            {
                totalSoldInMonth += Convert.ToInt32(sale.Quantity);
            }

            item.Date = new DateTime(year: startDate.Year, month: startDate.Month, day: 1);
            item.Quantity = totalSoldInMonth;

            Data.Add(item);

            startDate = startDate.AddMonths(1);
        }

        DateTime now = new DateTime(year: DateTime.Now.Year, month: DateTime.Now.Month, day: 1);

        try
        {
            PredictedData.Add(new DataItem() { Date = now, Quantity = Convert.ToInt32(Product.PredictedMonthlySales[0]) });
            PredictedData.Add(new DataItem() { Date = now.AddMonths(1), Quantity = Convert.ToInt32(Product.PredictedMonthlySales[1]) });
            PredictedData.Add(new DataItem() { Date = now.AddMonths(2), Quantity = Convert.ToInt32(Product.PredictedMonthlySales[2]) });
            PredictedData.Add(new DataItem() { Date = now.AddMonths(3), Quantity = Convert.ToInt32(Product.PredictedMonthlySales[3]) });
        }
        catch
        {

        }

        /*
        PredictedData.Add(new DataItem() { Date = now, Quantity = Convert.ToInt32(Product.MonthlySales) });
        PredictedData.Add(new DataItem() { Date = now.AddMonths(1), Quantity = Convert.ToInt32(Product.MonthlySales) });
        PredictedData.Add(new DataItem() { Date = now.AddMonths(2), Quantity = Convert.ToInt32(Product.MonthlySales) });
        PredictedData.Add(new DataItem() { Date = now.AddMonths(3), Quantity = Convert.ToInt32(Product.MonthlySales) });
        */
    }

    class DataItem
    {
        public DateTime Date { get; set; }
        public int Quantity { get; set; }
    }
}
