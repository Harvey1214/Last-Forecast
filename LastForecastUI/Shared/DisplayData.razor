@using Forecast
@using ForecastLibrary
@using Data

@inject ForecastingManager ForecastingManager
@inject NavigationManager NavigationManager
@inject ComparisonHandler ComparisonHandler  
@inject IJSRuntime JSRuntime

@if (ForecastingManager.Results != null)
{
    @foreach (var product in ForecastingManager.Results)
    {
        @if (product.Equals(OpenedProduct))
        {
            <Chart Product="@product" Visible="true" />
        }
        else
        {
            <Chart Product="@product" Visible="false" />
        }
    }
    <div class="block">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Page Size" />
        </div>
        <div class="col-md-8">
            <RadzenNumeric Min="1" Max="5000" @bind-Value="PageSize" @onchange="Update" />
        </div>
        <br />
    </div>

    <div class="block">
        <div class="col-md-12">
            <RadzenLink Text="Export to CSV" Path="@exportLink" Target="_blank" />
        </div>
        <br />
    </div>

    <div class="block">
        <div class="col-md-12">
            <RadzenButton Text="Compare" Click="@Compare" />
        </div>
        <br />
    </div>

    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="PageSize"
                AllowSorting="true" Data="@ForecastingManager.Results" TItem="ProcessOutput" AllowColumnResize="true" @ref="Table">
        <Columns>
            <RadzenGridColumn TItem="ProcessOutput" Property="Product.Code" Title="Code" />
            <RadzenGridColumn TItem="ProcessOutput" Property="Product.Title" Title="Title" />
            <RadzenGridColumn TItem="ProcessOutput" Property="DaysToOrder" Title="Days until Stockout" />
            <RadzenGridColumn TItem="ProcessOutput" Property="MonthlySales" Title="Monthly Sales" />
            <RadzenGridColumn TItem="ProcessOutput" Property="Product.MonthToDateSales" Title="Month to date (qty)" />
            <RadzenGridColumn TItem="ProcessOutput" Property="Product.LastMonthSales" Title="Last Month (qty)" />
            <RadzenGridColumn TItem="ProcessOutput" Property="Product.Inventory" Title="Inventory" />
            <RadzenGridColumn TItem="ProcessOutput" Property="Product.LeadTime" Title="Lead Time" />
            <RadzenGridColumn TItem="ProcessOutput" Property="Product.Code" Title="Open" Filterable="false" Sortable="false">
                <Template Context="data">
                    <RadzenButton Text="Open" Click="@(args => OpenDetails(data.Product.Code))" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}

@code {
    private ProcessOutput OpenedProduct { get; set; }

    private Chart Chart { get; set; }

    private RadzenGrid<ProcessOutput> Table { get; set; }

    private int PageSize = 10;

    private string exportLink
    {
        get
        {
            return $"/{ForecastingManager.FileName}";
        }
    }

    protected override void OnInitialized()
    {
        try
        {
            int half = (int)(ComparisonHandler.MaxId / 2);
            ComparisonHandler.Comparisons.RemoveAll(o => o.Id < half);
        }
        catch
        {

        }
    }

    private void Compare()
    {
        if (OpenedProduct == null)
        {
            return;
        }

        ComparisonHandler.MaxId++;
        Comparison comparison = new Comparison() { Id = ComparisonHandler.MaxId, Product = OpenedProduct.Product };
        ComparisonHandler.Comparisons.Add(comparison);

        try
        {
            JSRuntime.InvokeAsync<object>("open", $"/compare/{ComparisonHandler.MaxId}", "_blank");
        }
        catch
        {

        }
    }

    private void Update()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OpenDetails(string code)
    {
        //NavigationManager.NavigateTo($"/chart/{code}");

        OpenedProduct = ForecastingManager.Results.Where(o => o.Product.Code == code).FirstOrDefault();
        InvokeAsync(StateHasChanged);
    }
}
